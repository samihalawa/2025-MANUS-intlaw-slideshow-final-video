import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Loader, CheckCircle, Download } from 'lucide-react';
import { SimulatedPlayer } from './SimulatedPlayer';

interface ExportViewProps {
  slides: React.FC<{ isActive: boolean; }>[];
  onClose: () => void;
}

export const ExportView: React.FC<ExportViewProps> = ({ slides, onClose }) => {
  const [phase, setPhase] = useState<'capturing' | 'encoding' | 'ready'>('capturing');
  const [progress, setProgress] = useState(0);
  const totalSlides = slides.length;

  useEffect(() => {
    if (phase === 'capturing') {
      const interval = setInterval(() => {
        setProgress(p => {
          const newProgress = p + 1;
          if (newProgress >= totalSlides) {
            clearInterval(interval);
            setTimeout(() => setPhase('encoding'), 500);
            return totalSlides;
          }
          return newProgress;
        });
      }, 100); 
      return () => clearInterval(interval);
    } else if (phase === 'encoding') {
      setProgress(0);
      const interval = setInterval(() => {
        setProgress(p => {
          const newProgress = p + 2; 
          if (newProgress >= 100) {
            clearInterval(interval);
            setTimeout(() => setPhase('ready'), 500);
            return 100;
          }
          return newProgress;
        });
      }, 40);
      return () => clearInterval(interval);
    }
  }, [phase, totalSlides]);

  const handleDownload = () => {
    const exportingNote = `
INTLAW AI Presentation Video Export (Simulated)
==============================================

This is a simulated video file.

In a real-world application, this file would contain the MP4 video 
of your presentation, generated by capturing each slide and encoding
them into a video sequence.

For the purpose of this interactive demo, a real video export is not
feasible due to browser limitations without server-side processing or
heavy client-side libraries.

Thank you for trying out the export feature!

- AGENTS AI Limited, 2025
    `;
    const blob = new Blob([exportingNote.trim()], { type: 'video/mp4' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'intlaw-presentation.mp4';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };
  
  const renderPhaseContent = () => {
    switch (phase) {
      case 'capturing': {
        const captureProgress = Math.round((progress / totalSlides) * 100);
        return (
          <div className="text-center">
            <Loader className="w-16 h-16 text-cyan-400 animate-spin mx-auto" />
            <h3 className="text-4xl font-bold text-white mt-6">Step 1: Capturing Frames</h3>
            <p className="text-xl text-slate-300 mt-2">Processing slide {progress + 1} of {totalSlides}</p>
            <div className="w-full bg-slate-700 rounded-full h-2.5 mt-6">
              <motion.div className="bg-cyan-400 h-2.5 rounded-full" style={{ width: `${captureProgress}%` }} />
            </div>
          </div>
        );
      }
      case 'encoding': {
        return (
          <div className="text-center">
            <Loader className="w-16 h-16 text-cyan-400 animate-spin mx-auto" />
            <h3 className="text-4xl font-bold text-white mt-6">Step 2: Encoding Video</h3>
            <p className="text-xl text-slate-300 mt-2">This will just take a moment...</p>
            <div className="w-full bg-slate-700 rounded-full h-2.5 mt-6">
              <motion.div className="bg-cyan-400 h-2.5 rounded-full" style={{ width: `${progress}%` }} />
            </div>
          </div>
        );
      }
      case 'ready': {
        return (
          <div className="w-full max-w-6xl mx-auto flex flex-col items-center">
            <CheckCircle className="w-16 h-16 text-green-400 mx-auto" />
            <h3 className="text-4xl font-bold text-white mt-6">Step 3: Your Video is Ready!</h3>
            <p className="text-xl text-slate-300 mt-2 mb-8">Preview your presentation video below or download it.</p>
            <div className="w-full mb-8">
              <SimulatedPlayer slides={slides} />
            </div>
            <div className="flex items-center gap-4">
              <button
                onClick={handleDownload}
                className="flex items-center gap-3 bg-cyan-500 text-white font-semibold px-6 py-3 rounded-lg hover:bg-cyan-600 transition-colors"
              >
                <Download size={24} /> Download MP4
              </button>
               <button
                onClick={onClose}
                className="flex items-center gap-3 bg-slate-600 text-white font-semibold px-6 py-3 rounded-lg hover:bg-slate-700 transition-colors"
              >
                Finish
              </button>
            </div>
          </div>
        );
      }
      default: return null;
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="absolute inset-0 bg-slate-900/95 backdrop-blur-sm z-[1000] flex flex-col p-8 items-center justify-center"
    >
      <button
        onClick={onClose}
        className="absolute top-6 right-6 p-3 text-slate-400 hover:text-white transition-colors rounded-full hover:bg-white/10"
        aria-label="Close export"
      >
        <X size={32} />
      </button>

      <AnimatePresence mode="wait">
        <motion.div
            key={phase}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.4 }}
            className="w-full max-w-2xl"
        >
          {renderPhaseContent()}
        </motion.div>
      </AnimatePresence>
    </motion.div>
  );
};